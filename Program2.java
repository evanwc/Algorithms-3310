import java.util.Arrays;
import java.util.ArrayList;

public class Program2 {
    public static void main(String[] args) {
        //tests with random number generator, sizes 10, 100, 200, 1000
        int[] test1 = {81, 99, -64, -67, -41, -86, -53, -49, -29, 6};
        int[] test2 = {98, 80, 16, 72, 9, -92, -62, 84, -90, -78, -55, 86, 18, 34, 40, 82, -28, -36, -94, -16, -48, 55, -66, 64, 52, -67, -60, 77, -89, 59, 73, 24, -44, -22, -76, 21, -98, 94, -63, 31, 26, -100, 17, -65, 50, -69, 71, -85, -71, 48, 76, 51, 89, 67, -8, -95, 36, 58, -54, 78, 96, 22, 92, 70, 23, 20, -81, 93, 37, -47, -10, -3, 88, 74, -32, -12, 61, 4, -19, 99, 32, -93, 0, -88, 7, -58, 3, 45, -49, -41, -34, -82, 63, -35, 2, 39, 90, 14, -30, 83};
        int[] test3 = {-12, -38, 21, -67, 8, 53, 22, 28, -6, 10, -41, 85, -40, 19, 37, -94, 41, 39, -37, 34, -52, 87, -74, -15, 78, -61, -27, 14, 80, 61, 24, -47, -64, -89, 55, -30, -97, 96, -92, -8, -79, 94, -18, -16, 46, -1, -43, -83, -48, 42, 59, -85, -13, -66, 76, 7, -7, -42, 86, -3, 56, 75, -80, 84, 50, -50, -31, 30, 63, -33, -45, 12, -9, -14, 79, 99, -10, 3, 25, 1, -93, -84, 91, 77, 26, -56, 49, 43, 90, -86, 54, 64, 6, 74, -76, -39, 36, 13, -69, -46, 78, 66, -42, -6, -8, 30, 20, -19, 88, -67, -55, -51, 33, 72, 65, -36, -7, -73, 89, 2, 87, 43, -58, -76, 35, 91, 71, 67, 44, 51, -49, -27, 19, -48, -34, -87, 86, 52, -4, 26, 11, 49, 15, 9, -50, 54, -72, -37, -41, -45, -14, -5, -65, -86, 48, -47, -68, -75, -22, 10, -63, -3, 37, -1, 59, 6, 69, 83, 7, -61, 80, -70, -85, 50, 46, 21, 14, 25, -93, -88, -21, 82, 84, -92, 29, 61, 28, 23, 68, -40, 31, 0, -30, 64, -89, 97, 55, 17, -100, 99};
        int[] test4 = {14, 100, -42, -80, -98, -17, -49, 23, -94, 55, 25, 38, 13, 20, -57, 70, 19, -22, 15, -20, -38, 16, -15, 87, 48, -71, -12, 95, -33, -43, 24, -16, 59, -6, -67, 49, 65, -85, 33, -27, -52, -89, 64, 0, 9, -5, -32, -100, 79, -19, 94, 7, 41, 12, 3, -7, 35, 58, 78, 96, 73, -97, 69, 21, -36, 74, -21, 98, 22, 89, -82, 1, -61, 60, 34, -9, 81, -45, -91, -96, -50, 80, 28, 51, 42, -93, -1, -65, 93, -24, 8, -92, -25, -39, -84, 31, -78, 84, 77, 76, 65, 64, 14, 34, -6, -98, -100, -32, 13, -50, -41, 2, 53, 85, -35, -66, -18, -13, -47, 27, 56, 91, 69, -2, -11, -9, 31, -61, 81, 92, -90, 67, -33, 100, 32, 55, 37, -75, -69, -59, -64, -78, -14, -49, -83, -16, 82, -53, 38, 22, -52, -21, 58, 89, -48, 35, 99, -34, -15, -27, -24, -51, -72, 68, -20, 17, 75, -63, -1, 96, -5, 51, -36, -81, -28, -31, -95, -68, 40, 29, -42, 61, 71, 88, -96, -88, 50, 19, 26, -84, 57, 47, 90, 98, 72, -25, 11, -12, 10, 46, -66, -24, -74, 17, -100, -75, -80, -22, -87, -40, -73, 14, -88, -52, -71, 59, -83, 41, -58, -25, 67, -42, -82, -60, -20, -47, 9, -98, 62, 51, -45, 24, 77, -8, -96, 1, 96, 80, -39, -6, 54, 11, 26, -99, -31, 99, -78, -93, -1, 8, 33, -19, 52, -76, -65, -21, 25, 5, -56, -85, 49, 16, 2, 50, 48, -48, 58, -30, 35, -70, -29, -43, -27, 87, -51, 10, 76, -23, -28, -44, -92, 34, -4, 66, 22, -84, 42, 92, 47, -61, 97, -67, 78, 64, -57, 75, 7, -10, 6, 40, 78, 31, 74, -90, 36, -74, 47, -70, 52, -95, -52, 80, -33, -42, 69, -40, 41, 24, 19, 26, 67, 86, 37, -97, -16, -26, -53, -88, -80, 75, 54, -27, 62, -14, 34, 60, 17, 49, -47, -79, -32, -78, 77, 50, -1, -37, 39, -77, 23, 3, 12, -57, -98, 2, -30, -100, -21, 68, 89, -41, -64, 21, -43, -45, 83, 18, 98, 30, 99, -59, 70, 96, 32, -2, -15, 35, -55, 40, 29, -63, 48, -20, 6, 14, -11, -17, 27, 58, -87, 9, -72, 5, 8, -82, 0, 45, 63, -44, 44, 76, 69, -68, 39, -52, -29, -91, 1, 54, -58, 35, -19, 15, 53, -24, -6, -10, -31, -62, -34, 61, 17, -47, 92, -20, 37, -32, -2, 14, -33, -48, -49, 57, -59, 87, -80, 46, 73, -96, 96, 88, -30, 29, 64, 5, -35, -23, 43, 55, -45, -22, 48, -38, -76, 2, 67, 94, 8, 6, 7, -65, 93, -77, -69, 71, 90, -57, -92, -93, -95, -85, 52, -73, -79, 62, -37, 26, -87, -54, -5, 16, -11, -14, -7, -4, -81, -99, 50, 22, -83, -51, -89, 86, 85, 34, -3, 77, -67, -94, -9, 32, -61, -44, -92, 8, -96, -12, 77, 56, 66, -56, -82, -65, 100, 88, 26, -21, 53, -84, 5, 72, 39, 47, -63, -10, -46, 62, -28, 80, -89, -70, -43, 70, 95, -81, -5, -93, -24, -50, 76, -42, 84, -4, -13, 96, -8, -34, 22, 33, -98, 41, 97, -67, -47, 34, 43, -54, -3, -51, -37, -97, -99, -64, -14, 10, 44, 67, 75, -7, -68, 4, -53, -38, -17, -94, -79, 1, -19, 90, -27, 14, -88, 92, -1, 82, 6, -18, 49, 28, -73, -57, -85, 16, 11, 23, 9, 73, 69, -72, 35, 31, -43, 44, 69, 3, -20, -17, 56, -26, 65, -28, 13, 50, 85, 88, 49, -37, 61, -82, 25, -83, -1, 31, 14, -15, 47, -86, -93, -50, 100, -78, 41, -97, -48, 10, 9, -32, 28, -71, -53, -22, 55, -18, -65, 54, -81, 36, -52, 45, -63, -27, -85, 4, 81, 26, 74, 22, -95, -73, 34, 21, -59, 23, -13, -88, 29, -19, -49, 79, -23, -9, 87, 96, -60, -75, 24, -44, -99, -40, -66, 42, 30, -68, 27, 59, 70, 98, -14, 11, 84, 64, 73, -6, -90, -16, 97, 8, 18, -45, -8, 35, -41, -56, 1, 97, -59, 60, -90, 11, 66, -86, -1, -22, 51, -73, -29, 99, -44, -15, 32, -33, 25, -76, 91, 15, -50, 87, 40, 64, -96, -4, 16, 57, -89, -39, -85, 67, 20, 68, -34, 56, -35, 52, -27, -68, 73, -77, -82, -40, 30, 84, 76, -51, 89, 39, -21, 53, 70, -17, 46, 90, 77, 85, 96, -28, 55, -24, 42, 78, 54, -20, 100, 50, -10, -25, 44, -80, -12, 95, 23, 4, 49, 26, 28, -97, 93, -55, 80, -5, 6, -93, 2, -36, -3, -69, -45, 10, 47, 71, 62, 7, 27, -22, -71, 30, -10, -84, 49, -12, 10, 84, 8, 91, 59, 81, -87, 53, 13, 77, -97, -7, -36, -34, 0, -42, 97, 89, -73, -67, -95, 95, -30, -85, 37, -17, -79, -57, -21, -49, 39, 67, 54, -1, -86, -43, 96, 93, -8, 60, 61, -94, 80, 85, -81, 66, -61, 31, -63, 75, -53, 36, -50, 14, 47, -48, 16, 45, -15, 83, -75, 29, 48, 56, 18, -58, -82, 3, 65, 19, -52, 94, 22, 24, -51, -40, -41, -68, 63, 44, 52, 70, 99, 4, 76, 41, 28, 55, -98, 69, -5, -62, 21, -1, 66, 35, 81, 83, 86, -67, -2, 13, 97, 9, -63, 34, -40, -14, 96, 65, 85, -87, 62, 51, 39, -37, 19, -8, 23, -52, 57, -25, -68, -43, 2, 18, 27, -29, 58, 71, -97, -35, -44, 89, 93, 95, 48, -36, 63, -3, -51, -66, -27, -9, 40, 75, -23, 64, -89, 26, 49, 82, -10, -96, 90, 46, -13, 6, 56, -12, 41, 45, 98, 5, -34, 20, -95, -48, -62, -16, 10, -50, -57, -65, -47, 67, -19, -17, -82, 14, -64, 17, -76, -33, 60, -81, 7, 84, -26, -22, -24, 73};
        
        //testing algorithm 1 + CPU time
            System.out.println("\nAlgorithm 1: ");
            long Start = System.nanoTime();
        System.out.println(algorithm1(5, test1));
        System.out.println(algorithm1(20, test2));
        System.out.println(algorithm1(30, test3));
        System.out.println(algorithm1(50, test4));
            long End = System.nanoTime();
            System.out.println("Processing time: " + (End - Start));

        //testing algorithm 2 + CPU time
            System.out.println("\nAlgorithm 2: ");
            Start = System.nanoTime();
        System.out.println(algorithm2(5, test1));
        System.out.println(algorithm2(20, test2));
        System.out.println(algorithm2(30, test3));
        System.out.println(algorithm2(50, test4));
            End = System.nanoTime();
            System.out.println("Processing time: " + (End - Start));
    }

    static int algorithm1(int k, int[] arr) {
        if (arr.length == 1) return arr[0];
        else {
            int size = arr.length;
            int m = arr[size / 2];
            int[] temp1 = new int[size], temp3 = new int[size];
            int counter1 = 0, counter2 = 0, counter3 = 0;
            for (int i = 0; i < size; i++) {
                if (arr[i] < m) {
                    temp1[counter1] = arr[i];
                    counter1++;
                }
                else if (arr[i] == m) {
                    counter2++;
                }
                else {
                    temp3[counter3] = arr[i];
                    counter3++;
                }
            }
            int[] s1 = new int[counter1], s3 = new int[counter3];
            for (int i = 0; i < counter1; i++) s1[i] = temp1[i];
            for (int i = 0; i < counter3; i++) s3[i] = temp3[i];
            if (counter1 >= k) return algorithm1(k, s1);
            else if (counter1 + counter2 >= k) return m;
            else return algorithm1(k - counter1 - counter2, s3);
        }
    }

    static int algorithm2(int k, int[] arr) {
        if (arr.length < 50) {
            Arrays.sort(arr);
            return arr[k - 1];
        }
        else {
            int divSize = arr.length / 5;
            int[] arr1 = new int[divSize], arr2 = new int[divSize], arr3 = new int[divSize], arr4 = new int[divSize], arr5 = new int[divSize + arr.length % 5];
            int counter = 0;
            for (int i = 0; i < arr.length; i++) {
                if (counter == divSize) counter = 0; 
                if (i < divSize) {
                    arr1[counter] = arr[i];
                    counter++;
                }
                else if (i < divSize * 2) {
                    arr2[counter] = arr[i];
                    counter++;
                }
                else if (i < divSize * 3) {
                    arr3[counter] = arr[i];
                    counter++;
                }
                else if (i < divSize * 4) {
                    arr4[counter] = arr[i];
                    counter++;
                }
                else {
                    arr5[counter] = arr[i];
                    counter++;
                }
            }
            Arrays.sort(arr1);
            Arrays.sort(arr2);
            Arrays.sort(arr3);
            Arrays.sort(arr4);
            Arrays.sort(arr5);
            int mid = divSize / 2;
            
            int[] medians = new int[5];
            medians[0] = arr1[mid];
            medians[1] = arr2[mid];
            medians[2] = arr3[mid]; 
            medians[3] = arr4[mid];
            medians[4] = arr5[counter/2];
            
            int median = algorithm2(2, medians);
            
            int[] temp1 = new int[arr.length], temp3 = new int[arr.length];
            int counter1 = 0, counter2 = 0, counter3 = 0;
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] < median) {
                    temp1[counter1] = arr[i];
                    counter1++;
                }
                else if (arr[i] == median) {
                    counter2++;
                }
                else {
                    temp3[counter3] = arr[i];
                    counter3++;
                }
            }
            int[] s1 = new int[counter1], s3 = new int[counter3];
            for (int i = 0; i < counter1; i++) s1[i] = temp1[i];
            for (int i = 0; i < counter3; i++) s3[i] = temp3[i];
            if (counter1 >= k) return algorithm2(k, s1);
            else if (counter1 + counter2 >= k) return median;
            else return algorithm2(k - counter1 - counter2, s3);
        }
    }
}
